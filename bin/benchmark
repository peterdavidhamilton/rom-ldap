#!/usr/bin/env ruby

require 'bundler/setup'

Bundler.setup

require 'benchmark/ips'
require 'net-ldap'
require 'rom-ldap'

net_ldap = Net::LDAP.new(
            host: ENV['LDAPHOST'],
            port: ENV['LDAPPORT'],
            base: ENV['LDAPBASE'],
            auth: {
              method: :simple,
              username: ENV['LDAPBINDDN'],
              password: ENV['LDAPBINDPW']
            }
          )


logger = Logger.new(File.open('./log/benchmark.log', 'a'))

filter = '(objectclass=*)'

# Pass nil to use ENV vars.
config = ROM::Configuration.new(:ldap, nil, extensions: %i[compatibility], logger: logger)

# Inferred => all attributes including operational
#
config.relation(:rom) do
  schema(filter, infer: true)
end


# Explicit => schema only attributes
#
config.relation(:static) do
  schema(filter) do
    attribute :cn,      ROM::LDAP::Types::Strings
    # attribute :study,   ROM::LDAP::Types::Symbol
    # attribute :family,  ROM::LDAP::Types::String
    # attribute :genus,   ROM::LDAP::Types::String
    # attribute :order,   ROM::LDAP::Types::String
    # attribute :species, ROM::LDAP::Types::String

    use :timestamps, attributes: %i(create_timestamp), type: ROM::LDAP::Types::Time
  end
end


rom = ROM.container(config)


Benchmark.ips do |bm|

  bm.config(time: 5, warmup: 0.5, iterations: 3)

  #
  # One Attribute
  #
  bm.report('NET one') do
    net_ldap.search(attributes: %w[cn]).to_a
  end

  bm.report('ROM [explicit] one') do
    rom.relations[:static].project(:cn).to_a
  end

  bm.report('ROM [inferred] one') do
    rom.relations[:rom].project(:cn).to_a
  end



  #
  # All Attributes
  #
  bm.report('NET all') do
    net_ldap.search
  end

  bm.report('ROM [explicit] all') do
    rom.relations[:static].to_a
  end

  bm.report('ROM [inferred] all') do
    rom.relations[:rom].to_a
  end



  #
  # Ordered Attributes
  #
  # bm.report('NET order') do
  #   binding.pry
  #   net_ldap.search(sort_controls: ['cn'])
  #   # net_ldap.search
  # end

  bm.report('ROM [explicit] order') do
    rom.relations[:static].order(:cn).to_a
  end

  bm.report('ROM [inferred] order') do
    rom.relations[:rom].order(:cn).to_a
  end




  #
  # Structs
  #
  bm.report('NET struct') do
    net_ldap.search.map { |e| OpenStruct.new(e.instance_variable_get(:@myhash)) }
  end

  bm.report('ROM [explicit] struct') do
    rom.relations[:static].with(auto_struct: true).has(:cn).to_a
  end

  bm.report('ROM [inferred] struct') do
    rom.relations[:rom].with(auto_struct: true).has(:cn).project(:cn).to_a
  end

  bm.compare!
end

